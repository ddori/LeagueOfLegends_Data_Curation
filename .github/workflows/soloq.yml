name: Get SoloQ data

on:
  workflow_dispatch:
    inputs:
      riot_api_key:
        description: "Riot API key (valid ~24h). Will be masked in logs."
        required: true
        type: string
      max_pages_per_player:
        description: "Optional: limit pages per player for quick run (e.g., 2). Empty means full."
        required: false
        default: ""
        type: string
      patch_mm:
        description: "Patch prefix filter (e.g., 15.20). Leave empty to keep code default."
        required: false
        default: ""
        type: string

jobs:
  collect:
    runs-on: ubuntu-latest
    env:
      RIOT_API_KEY: ${{ inputs.riot_api_key }}
      MAX_PAGES_PER_PLAYER: ${{ inputs.max_pages_per_player }}
      PATCH_MM_OVERRIDE: ${{ inputs.patch_mm }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mask the key in logs
        run: |
          echo "::add-mask::${{ inputs.riot_api_key }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Optional overrides (patch/max_pages) -> write env file
        run: |
          # Create a .runenv file consumed by main.py if you want
          echo "MAX_PAGES_PER_PLAYER=${MAX_PAGES_PER_PLAYER}" > .runenv
          echo "PATCH_MM_OVERRIDE=${PATCH_MM_OVERRIDE}" >> .runenv
          cat .runenv | sed 's/=.*/=<masked>/'  # show only keys

      - name: Run
        run: |
          python - << 'PY'
          import os
          from collector import collect_all_tiers
          from config import PATCH_MM, OUT_DIR
          # Allow on-the-fly overrides from workflow inputs (no .env file)
          patch = os.getenv("PATCH_MM_OVERRIDE") or PATCH_MM
          mpp_raw = (os.getenv("MAX_PAGES_PER_PLAYER") or "").strip()
          mpp = int(mpp_raw) if mpp_raw.isdigit() else None
          print(f"[Run] PATCH_MM={patch} | MAX_PAGES_PER_PLAYER={mpp}")
          # small shim: monkey-patch config.PATCH_MM at runtime if overridden
          import config
          config.PATCH_MM = patch
          collect_all_tiers(max_pages_per_player=mpp)
          print(f"[Done] Output at: {OUT_DIR}")
          PY

      - name: Upload results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: riot-output
          path: output_1520_by_tier
