name: Get SoloQ data

on:
  workflow_dispatch:
    inputs:
      riot_api_key:
        description: "Riot API key (valid for ~24h). Will be masked in logs."
        required: true
        type: string
      max_pages_per_player:
        description: "Optional: limit pages per player for quick run (e.g., 2). Empty = full."
        required: false
        default: ""
        type: string
      patch_mm:
        description: "Patch prefix filter (e.g., 15.20). Leave empty to use default."
        required: false
        default: ""
        type: string

jobs:
  collect:
    runs-on: ubuntu-latest
    env:
      RIOT_API_KEY: ${{ inputs.riot_api_key }}
      MAX_PAGES_PER_PLAYER: ${{ inputs.max_pages_per_player }}
      PATCH_MM_OVERRIDE: ${{ inputs.patch_mm }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask API key in logs
        run: echo "::add-mask::${{ inputs.riot_api_key }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: SoloQ
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run SoloQ collector
        working-directory: SoloQ
        run: |
          python - << 'PY'
          import os
          from collector import collect_all_tiers
          import config

          patch = os.getenv("PATCH_MM_OVERRIDE") or config.PATCH_MM
          mpp_raw = (os.getenv("MAX_PAGES_PER_PLAYER") or "").strip()
          mpp = int(mpp_raw) if mpp_raw.isdigit() else None

          config.PATCH_MM = patch
          print(f"[Run] PATCH_MM={patch} | MAX_PAGES_PER_PLAYER={mpp}")

          collect_all_tiers(max_pages_per_player=mpp)
          print(f"[Done] Output at: {config.OUT_DIR}")
          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"SOL_OUT_DIR=SoloQ/{config.OUT_DIR}\n")
          PY

      - name: Verify raw output
        run: |
          echo "Detected raw output: $SOL_OUT_DIR"
          ls -al "$SOL_OUT_DIR" || true

      - name: Run parser (CSV & Parquet)
        working-directory: SoloQ
        run: python parse.py

      - name: List parsed outputs
        working-directory: SoloQ
        run: ls -al data || true

      - name: Upload raw JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: soloq-raw-json
          path: ${{ env.SOL_OUT_DIR }}
          retention-days: 14

      - name: Upload parsed dataset (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: soloq-parsed
          path: |
            SoloQ/data/*.csv
            SoloQ/data/*.parquet
          if-no-files-found: error
          retention-days: 14
